apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  # // "copilot-ops-bot" to match the prefix in manifests/base/tasks/kustomization.yaml namePrefix
  # // (not necessary for functionality, just for consistency)
  name: controller
spec: 
  params:
  - name: REPO_NAME
    type: string
    default: ".github"
  - name: ISSUE_NUMBER
    type: string
  - name: ISSUE_OWNER
    type: string
  - name: 'SECRET_NAME'
  - name: 'USER_INPUT'
    type: string
  - name: 'PR_FLAG'
    type: string
  steps:
    - image: 'quay.io/copilot-ops/copilot-ops:latest'
      name: 'copilot-ops-execution'
      imagePullPolicy: Always
      env: 
        - name: ORG_NAME
          valueFrom:
            secretKeyRef:
              name: $(params.SECRET_NAME)
              key: orgName
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.SECRET_NAME)
              key: token
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: controller
              key: openai_api_key
        - name: OPENAI_ORG_ID
          valueFrom:
            secretKeyRef:
              name: controller
              key: openai_org_id
      script: |
        ######################################## 
        # Creates a randomly-generated saying.
        # Globals:
        #   None
        # Arguments:
        #   None
        # Returns:
        #   (string) - The random saying
        ######################################## 
        getRandomSaying() {
          copilotOpsAdjectives=(
            "majestic"
            "benevolent"
            "gracious"
            "all-knowing"
            "exalted"
            "distinguished"
            "great"
            "glorious"
            "marvelous"
            "awe-inspiring"
          )

          actionSuffixes=(
            "miraculously solved all of your problems"
            "granted you a solution"
            "supplied a fix to your predicament"
            "graced you with its infinite knowledge"
            "blessed you with a stroke of Kubernetes wisdom"
            "delivered a YAML ailment for your development desires"
          )
 
          adjectiveLength=${#copilotOpsAdjectives[@]}
          randomAdjectiveIdx=$(($RANDOM % $adjectiveLength))
          randomAdjective=${copilotOpsAdjectives[${randomAdjectiveIdx}]}
        
          suffixLength=${#actionSuffixes[@]}
          randomSuffixIdx=$(($RANDOM % $suffixLength))
          randomSuffix=${actionSuffixes[${randomSuffixIdx}]}
          
          fullStatement="The ${randomAdjective} copilot-ops bot has ${randomSuffix}"
          echo "${fullStatement}"
        }

        ######################################## 
        # Switches to the given branch, creating it
        # if it doesn't exist
        # Globals:
        #   None
        # Arguments:
        #   (string) - branch name
        # Returns:
        #   None
        ######################################## 
        switchToBranch() {
          branchName="${1}"
          if ! [[ $(git switch "${branchName}") ]]; then
            git switch -c "${branchName}"
          fi
        }

        ########################################
        # Writes files from the generated copilot-ops
        # JSON file into their respective locations.
        # Globals:
        #   None
        # Arguments:
        #   (string) - filename
        # Returns:
        #   None
        ########################################
        writeFiles() {
          declare filename="${1}"

          # write all entries to files
          declare newName
          declare newContents
          declare -i num=0
          for file in $(jq '.generatedFiles[] | @base64' "${filename}" -c -r); do
            _get_prop() {
              echo "${file}" | base64 -d | jq -r "${1}"
            }
            newName="generated-file-${num}.yaml"
            newContents=$(_get_prop '.content')
            echo "${newContents}" > "${newName}"
            num=$(( num + 1 ))
          done
        }

        ########################################
        # Returns the name of the current branch
        # Globals:
        #   ISSUE_NUMBER
        # Returns:
        #   Branch name
        ########################################
        getBranchName() {
          echo "copilot-ops-fix-issue-$(params.ISSUE_NUMBER)"
        }

        ########################################
        # Create a comment on the original issue
        # Globals:
        #   GITHUB_TOKEN
        #   ORG_NAME
        #   params.REPO_NAME
        #   params.ISSUE_NUMBER
        ########################################
        postComment() {
          # todo: create comment with pull-request number to reference
          commentInfo=$(curl -s \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            https://api.github.com/repos/${ORG_NAME}/$(params.REPO_NAME)/issues/$(params.ISSUE_NUMBER)/comments \
            -d '{"body":"Created pull-request for issue"}' | jq  '.')
        }

        main() {
          branchName=$(getBranchName)
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
 
          # Clone repository
          git clone https://x-access-token:${GITHUB_TOKEN}@github.com/${ORG_NAME}/$(params.REPO_NAME)
          cd $(params.REPO_NAME)
  
          git remote -v
          switchToBranch "${branchName}"
          git reset --hard main

          # generate files
          declare -r outfile="results.json"
          userRequest="$(params.USER_INPUT)" 
          /copilot-ops generate --request "${userRequest}" --backend gpt-3  1> "${outfile}"
          writeFiles "${outfile}"
          echo "contents of ${outfile}:"$(cat "${outfile}")

          # cleanup outfile
          rm "${outfile}"

          # add all of the files generated
          git add .

          randomSaying=$(getRandomSaying)
          git commit -m "${randomSaying}"
          git push -f --force-with-lease --set-upstream origin "${branchName}"

          prInfo=$(curl -s -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -d '{
              "title":"Fixes issue #'$(params.ISSUE_NUMBER)' by '$(params.ISSUE_OWNER)' with copilot-ops", 
              "body":"Fixes #$(params.ISSUE_NUMBER)",
              "head":"'$branchName'",
              "base":"main"
            }' "https://api.github.com/repos/${ORG_NAME}/$(params.REPO_NAME)/pulls" | jq '.')
 
        }

        main
